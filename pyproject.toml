[project]
name = "events"
version = "0.1.0"
description = "Events for interservice communication"
authors = [
    {name = "Kirill Sumorokov", email = "sumorokov.k@gmail.com"},
]
readme = "README.md"
license = {text = "MIT"}

requires-python = ">=3.10"

dependencies = [
    "attrs>=23.2.0",
    "inflection>=0.5.1",
    "jsonschema>=4.22.0",
    "ujson>=5.10.0",
]

[project.optional-dependencies]
lint = [
    "mypy>=1.10.0",
    "types-ujson>=5.10.0.20240515",
    "ruff>=0.4.8",
    "types-jsonschema>=4.22.0.20240610",
]
test = [
    "coverage[toml]>=7.5.3",
    "pytest>=8.2.2",
    "pytest-aiohttp>=1.0.5",
    "pytest-cov>=5.0.0",
    "pytest-freezer>=0.4.8",
    "pytest-randomly>=3.15.0",
]
debug = [
    "debugpy>=1.8.1",
    "ipdb>=0.13.13",
    "ipython>=8.25.0",
]
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm]
distribution = true

[tool.pdm.scripts]
_.env_file = ".env"
check_format.cmd = "ruff format --check --diff src/events tests"
check_mypy.cmd = "mypy src/events tests"
check_ruff.cmd = "ruff check --output-format=full --no-fix src/events tests"
format.composite = [
  "ruff check --select I --fix src/events tests",
  "ruff format src/events tests"
]
lint = {composite = [
  "check_format",
  "check_ruff",
  "check_mypy"
]}
test.cmd = "pytest {args}"
cover.composite = [
  "coverage erase",
  "coverage run -m pytest {args}",
  "coverage report -m",
  "coverage html"
]

# Coverage config
[tool.coverage.run]
branch = true
data_file = "tests/.coverage"
source = ["src/events"]
omit = [
  "*__main__*",
]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
show_missing = true

[tool.coverage.html]
directory = "tests/coverage"

# Mypy config
[tool.mypy]
strict = true
python_version = "3.12"

warn_return_any = true
warn_unused_configs = true

# [[tool.mypy.overrides]]
# module = "punq.*"
# ignore_missing_imports = true

# Pytest settings
[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
markers = ["unit", "integration", "smoke"]
norecursedirs = ".tox"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]

# Ruff config
[tool.ruff]
exclude = ['.venv']
line-length = 88
respect-gitignore = true
src = ["src", "tests"]
target-version = "py312"

[tool.ruff.lint]
ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D107", # Missing docstring in __init__
  "PT004",
  "SIM108"
]
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "D",    # pydocstyle
  "F",    # pyflakes
  "C90",  # mccabe
  "C4",   # flake8-comprehensions
  # "B",    # flake8-bugbear
  "Q",    # flake8-quotes
  "T20",  # flake8-print
  "PT",   # flake8-pytest-style
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "ERA",  # eradicate
]
unfixable = [
  'T201',
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["events", "tests"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
